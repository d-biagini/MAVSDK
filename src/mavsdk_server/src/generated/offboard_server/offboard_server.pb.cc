// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offboard_server/offboard_server.proto

#include "offboard_server/offboard_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace mavsdk {
namespace rpc {
namespace offboard_server {
PROTOBUF_CONSTEXPR SubscribePositionTargetGlobalRequest::SubscribePositionTargetGlobalRequest(
    ::_pbi::ConstantInitialized){}
struct SubscribePositionTargetGlobalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribePositionTargetGlobalRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribePositionTargetGlobalRequestDefaultTypeInternal() {}
  union {
    SubscribePositionTargetGlobalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribePositionTargetGlobalRequestDefaultTypeInternal _SubscribePositionTargetGlobalRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscribePositionTargetGlobalResponse::SubscribePositionTargetGlobalResponse(
    ::_pbi::ConstantInitialized)
  : position_global_yaw_(nullptr){}
struct SubscribePositionTargetGlobalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribePositionTargetGlobalResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribePositionTargetGlobalResponseDefaultTypeInternal() {}
  union {
    SubscribePositionTargetGlobalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribePositionTargetGlobalResponseDefaultTypeInternal _SubscribePositionTargetGlobalResponse_default_instance_;
PROTOBUF_CONSTEXPR PositionGlobalYaw::PositionGlobalYaw(
    ::_pbi::ConstantInitialized)
  : lat_deg_(0)
  , lon_deg_(0)
  , alt_m_(0)
  , yaw_deg_(0)
  , altitude_type_(0)
{}
struct PositionGlobalYawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionGlobalYawDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionGlobalYawDefaultTypeInternal() {}
  union {
    PositionGlobalYaw _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionGlobalYawDefaultTypeInternal _PositionGlobalYaw_default_instance_;
}  // namespace offboard_server
}  // namespace rpc
}  // namespace mavsdk
static ::_pb::Metadata file_level_metadata_offboard_5fserver_2foffboard_5fserver_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_offboard_5fserver_2foffboard_5fserver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_offboard_5fserver_2foffboard_5fserver_2eproto = nullptr;

const uint32_t TableStruct_offboard_5fserver_2foffboard_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse, position_global_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, lat_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, lon_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, alt_m_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::offboard_server::PositionGlobalYaw, altitude_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalRequest)},
  { 6, -1, -1, sizeof(::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse)},
  { 13, -1, -1, sizeof(::mavsdk::rpc::offboard_server::PositionGlobalYaw)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::mavsdk::rpc::offboard_server::_SubscribePositionTargetGlobalRequest_default_instance_._instance,
  &::mavsdk::rpc::offboard_server::_SubscribePositionTargetGlobalResponse_default_instance_._instance,
  &::mavsdk::rpc::offboard_server::_PositionGlobalYaw_default_instance_._instance,
};

const char descriptor_table_protodef_offboard_5fserver_2foffboard_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%offboard_server/offboard_server.proto\022"
  "\032mavsdk.rpc.offboard_server\032\024mavsdk_opti"
  "ons.proto\032\027offboard/offboard.proto\"&\n$Su"
  "bscribePositionTargetGlobalRequest\"s\n%Su"
  "bscribePositionTargetGlobalResponse\022J\n\023p"
  "osition_global_yaw\030\001 \001(\0132-.mavsdk.rpc.of"
  "fboard_server.PositionGlobalYaw\"\203\002\n\021Posi"
  "tionGlobalYaw\022\017\n\007lat_deg\030\001 \001(\001\022\017\n\007lon_de"
  "g\030\002 \001(\001\022\r\n\005alt_m\030\003 \001(\002\022\017\n\007yaw_deg\030\004 \001(\002\022"
  "Q\n\raltitude_type\030\005 \001(\0162:.mavsdk.rpc.offb"
  "oard_server.PositionGlobalYaw.AltitudeTy"
  "pe\"Y\n\014AltitudeType\022\032\n\026ALTITUDE_TYPE_REL_"
  "HOME\020\000\022\026\n\022ALTITUDE_TYPE_AMSL\020\001\022\025\n\021ALTITU"
  "DE_TYPE_AGL\020\0022\316\001\n\025OffboardServerService\022"
  "\264\001\n%SubscribePositionTargetGlobalSetpoin"
  "t\022@.mavsdk.rpc.offboard_server.Subscribe"
  "PositionTargetGlobalRequest\032A.mavsdk.rpc"
  ".offboard_server.SubscribePositionTarget"
  "GlobalResponse\"\004\200\265\030\0000\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_deps[2] = {
  &::descriptor_table_mavsdk_5foptions_2eproto,
  &::descriptor_table_offboard_2foffboard_2eproto,
};
static ::_pbi::once_flag descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto = {
    false, false, 750, descriptor_table_protodef_offboard_5fserver_2foffboard_5fserver_2eproto,
    "offboard_server/offboard_server.proto",
    &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_once, descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_offboard_5fserver_2foffboard_5fserver_2eproto::offsets,
    file_level_metadata_offboard_5fserver_2foffboard_5fserver_2eproto, file_level_enum_descriptors_offboard_5fserver_2foffboard_5fserver_2eproto,
    file_level_service_descriptors_offboard_5fserver_2foffboard_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_getter() {
  return &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_offboard_5fserver_2foffboard_5fserver_2eproto(&descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto);
namespace mavsdk {
namespace rpc {
namespace offboard_server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionGlobalYaw_AltitudeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto);
  return file_level_enum_descriptors_offboard_5fserver_2foffboard_5fserver_2eproto[0];
}
bool PositionGlobalYaw_AltitudeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw::ALTITUDE_TYPE_REL_HOME;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw::ALTITUDE_TYPE_AMSL;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw::ALTITUDE_TYPE_AGL;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw::AltitudeType_MIN;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw::AltitudeType_MAX;
constexpr int PositionGlobalYaw::AltitudeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SubscribePositionTargetGlobalRequest::_Internal {
 public:
};

SubscribePositionTargetGlobalRequest::SubscribePositionTargetGlobalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalRequest)
}
SubscribePositionTargetGlobalRequest::SubscribePositionTargetGlobalRequest(const SubscribePositionTargetGlobalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribePositionTargetGlobalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribePositionTargetGlobalRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionTargetGlobalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_getter, &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_once,
      file_level_metadata_offboard_5fserver_2foffboard_5fserver_2eproto[0]);
}

// ===================================================================

class SubscribePositionTargetGlobalResponse::_Internal {
 public:
  static const ::mavsdk::rpc::offboard_server::PositionGlobalYaw& position_global_yaw(const SubscribePositionTargetGlobalResponse* msg);
};

const ::mavsdk::rpc::offboard_server::PositionGlobalYaw&
SubscribePositionTargetGlobalResponse::_Internal::position_global_yaw(const SubscribePositionTargetGlobalResponse* msg) {
  return *msg->position_global_yaw_;
}
SubscribePositionTargetGlobalResponse::SubscribePositionTargetGlobalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
}
SubscribePositionTargetGlobalResponse::SubscribePositionTargetGlobalResponse(const SubscribePositionTargetGlobalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position_global_yaw()) {
    position_global_yaw_ = new ::mavsdk::rpc::offboard_server::PositionGlobalYaw(*from.position_global_yaw_);
  } else {
    position_global_yaw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
}

inline void SubscribePositionTargetGlobalResponse::SharedCtor() {
position_global_yaw_ = nullptr;
}

SubscribePositionTargetGlobalResponse::~SubscribePositionTargetGlobalResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribePositionTargetGlobalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_global_yaw_;
}

void SubscribePositionTargetGlobalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribePositionTargetGlobalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_global_yaw_ != nullptr) {
    delete position_global_yaw_;
  }
  position_global_yaw_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribePositionTargetGlobalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .mavsdk.rpc.offboard_server.PositionGlobalYaw position_global_yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_global_yaw(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribePositionTargetGlobalResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard_server.PositionGlobalYaw position_global_yaw = 1;
  if (this->_internal_has_position_global_yaw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position_global_yaw(this),
        _Internal::position_global_yaw(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  return target;
}

size_t SubscribePositionTargetGlobalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.offboard_server.PositionGlobalYaw position_global_yaw = 1;
  if (this->_internal_has_position_global_yaw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_global_yaw_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribePositionTargetGlobalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribePositionTargetGlobalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribePositionTargetGlobalResponse::GetClassData() const { return &_class_data_; }

void SubscribePositionTargetGlobalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribePositionTargetGlobalResponse *>(to)->MergeFrom(
      static_cast<const SubscribePositionTargetGlobalResponse &>(from));
}


void SubscribePositionTargetGlobalResponse::MergeFrom(const SubscribePositionTargetGlobalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position_global_yaw()) {
    _internal_mutable_position_global_yaw()->::mavsdk::rpc::offboard_server::PositionGlobalYaw::MergeFrom(from._internal_position_global_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribePositionTargetGlobalResponse::CopyFrom(const SubscribePositionTargetGlobalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard_server.SubscribePositionTargetGlobalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribePositionTargetGlobalResponse::IsInitialized() const {
  return true;
}

void SubscribePositionTargetGlobalResponse::InternalSwap(SubscribePositionTargetGlobalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(position_global_yaw_, other->position_global_yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribePositionTargetGlobalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_getter, &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_once,
      file_level_metadata_offboard_5fserver_2foffboard_5fserver_2eproto[1]);
}

// ===================================================================

class PositionGlobalYaw::_Internal {
 public:
};

PositionGlobalYaw::PositionGlobalYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:mavsdk.rpc.offboard_server.PositionGlobalYaw)
}
PositionGlobalYaw::PositionGlobalYaw(const PositionGlobalYaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_deg_, &from.lat_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_type_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(altitude_type_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.offboard_server.PositionGlobalYaw)
}

inline void PositionGlobalYaw::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_type_) -
    reinterpret_cast<char*>(&lat_deg_)) + sizeof(altitude_type_));
}

PositionGlobalYaw::~PositionGlobalYaw() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionGlobalYaw::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionGlobalYaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PositionGlobalYaw::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_type_) -
      reinterpret_cast<char*>(&lat_deg_)) + sizeof(altitude_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionGlobalYaw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lon_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lon_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float alt_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          alt_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw_deg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .mavsdk.rpc.offboard_server.PositionGlobalYaw.AltitudeType altitude_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_altitude_type(static_cast<::mavsdk::rpc::offboard_server::PositionGlobalYaw_AltitudeType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PositionGlobalYaw::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat_deg(), target);
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon_deg(), target);
  }

  // float alt_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt_m = this->_internal_alt_m();
  uint32_t raw_alt_m;
  memcpy(&raw_alt_m, &tmp_alt_m, sizeof(tmp_alt_m));
  if (raw_alt_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_alt_m(), target);
  }

  // float yaw_deg = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw_deg(), target);
  }

  // .mavsdk.rpc.offboard_server.PositionGlobalYaw.AltitudeType altitude_type = 5;
  if (this->_internal_altitude_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_altitude_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  return target;
}

size_t PositionGlobalYaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = this->_internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    total_size += 1 + 8;
  }

  // double lon_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = this->_internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    total_size += 1 + 8;
  }

  // float alt_m = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt_m = this->_internal_alt_m();
  uint32_t raw_alt_m;
  memcpy(&raw_alt_m, &tmp_alt_m, sizeof(tmp_alt_m));
  if (raw_alt_m != 0) {
    total_size += 1 + 4;
  }

  // float yaw_deg = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = this->_internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 1 + 4;
  }

  // .mavsdk.rpc.offboard_server.PositionGlobalYaw.AltitudeType altitude_type = 5;
  if (this->_internal_altitude_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_altitude_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionGlobalYaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PositionGlobalYaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionGlobalYaw::GetClassData() const { return &_class_data_; }

void PositionGlobalYaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PositionGlobalYaw *>(to)->MergeFrom(
      static_cast<const PositionGlobalYaw &>(from));
}


void PositionGlobalYaw::MergeFrom(const PositionGlobalYaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat_deg = from._internal_lat_deg();
  uint64_t raw_lat_deg;
  memcpy(&raw_lat_deg, &tmp_lat_deg, sizeof(tmp_lat_deg));
  if (raw_lat_deg != 0) {
    _internal_set_lat_deg(from._internal_lat_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lon_deg = from._internal_lon_deg();
  uint64_t raw_lon_deg;
  memcpy(&raw_lon_deg, &tmp_lon_deg, sizeof(tmp_lon_deg));
  if (raw_lon_deg != 0) {
    _internal_set_lon_deg(from._internal_lon_deg());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_alt_m = from._internal_alt_m();
  uint32_t raw_alt_m;
  memcpy(&raw_alt_m, &tmp_alt_m, sizeof(tmp_alt_m));
  if (raw_alt_m != 0) {
    _internal_set_alt_m(from._internal_alt_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw_deg = from._internal_yaw_deg();
  uint32_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
  if (from._internal_altitude_type() != 0) {
    _internal_set_altitude_type(from._internal_altitude_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionGlobalYaw::CopyFrom(const PositionGlobalYaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.offboard_server.PositionGlobalYaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionGlobalYaw::IsInitialized() const {
  return true;
}

void PositionGlobalYaw::InternalSwap(PositionGlobalYaw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionGlobalYaw, altitude_type_)
      + sizeof(PositionGlobalYaw::altitude_type_)
      - PROTOBUF_FIELD_OFFSET(PositionGlobalYaw, lat_deg_)>(
          reinterpret_cast<char*>(&lat_deg_),
          reinterpret_cast<char*>(&other->lat_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionGlobalYaw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_getter, &descriptor_table_offboard_5fserver_2foffboard_5fserver_2eproto_once,
      file_level_metadata_offboard_5fserver_2foffboard_5fserver_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace offboard_server
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalRequest*
Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse*
Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard_server::SubscribePositionTargetGlobalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::offboard_server::PositionGlobalYaw*
Arena::CreateMaybeMessage< ::mavsdk::rpc::offboard_server::PositionGlobalYaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mavsdk::rpc::offboard_server::PositionGlobalYaw >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
