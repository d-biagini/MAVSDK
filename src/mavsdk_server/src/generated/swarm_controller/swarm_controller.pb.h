// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swarm_controller/swarm_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_swarm_5fcontroller_2fswarm_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_swarm_5fcontroller_2fswarm_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_swarm_5fcontroller_2fswarm_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
namespace mavsdk {
namespace rpc {
namespace swarm_controller {
class IsActiveRequest;
struct IsActiveRequestDefaultTypeInternal;
extern IsActiveRequestDefaultTypeInternal _IsActiveRequest_default_instance_;
class IsActiveResponse;
struct IsActiveResponseDefaultTypeInternal;
extern IsActiveResponseDefaultTypeInternal _IsActiveResponse_default_instance_;
class PositionGlobalYaw;
struct PositionGlobalYawDefaultTypeInternal;
extern PositionGlobalYawDefaultTypeInternal _PositionGlobalYaw_default_instance_;
class SetPositionGlobalRequest;
struct SetPositionGlobalRequestDefaultTypeInternal;
extern SetPositionGlobalRequestDefaultTypeInternal _SetPositionGlobalRequest_default_instance_;
class SetPositionGlobalResponse;
struct SetPositionGlobalResponseDefaultTypeInternal;
extern SetPositionGlobalResponseDefaultTypeInternal _SetPositionGlobalResponse_default_instance_;
class SetRateRequest;
struct SetRateRequestDefaultTypeInternal;
extern SetRateRequestDefaultTypeInternal _SetRateRequest_default_instance_;
class SetRateResponse;
struct SetRateResponseDefaultTypeInternal;
extern SetRateResponseDefaultTypeInternal _SetRateResponse_default_instance_;
class StartRequest;
struct StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
struct StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace swarm_controller
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::swarm_controller::IsActiveRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::IsActiveRequest>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::IsActiveResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::IsActiveResponse>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::PositionGlobalYaw>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::SetRateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::SetRateRequest>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::SetRateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::SetRateResponse>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::StartRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::StartRequest>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::StartResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::StartResponse>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::StopRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::StopRequest>(Arena*);
template<> ::mavsdk::rpc::swarm_controller::StopResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::swarm_controller::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace swarm_controller {

enum PositionGlobalYaw_AltitudeType : int {
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME = 0,
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL = 1,
  PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL = 2,
  PositionGlobalYaw_AltitudeType_PositionGlobalYaw_AltitudeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PositionGlobalYaw_AltitudeType_PositionGlobalYaw_AltitudeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PositionGlobalYaw_AltitudeType_IsValid(int value);
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw_AltitudeType_AltitudeType_MIN = PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME;
constexpr PositionGlobalYaw_AltitudeType PositionGlobalYaw_AltitudeType_AltitudeType_MAX = PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL;
constexpr int PositionGlobalYaw_AltitudeType_AltitudeType_ARRAYSIZE = PositionGlobalYaw_AltitudeType_AltitudeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionGlobalYaw_AltitudeType_descriptor();
template<typename T>
inline const std::string& PositionGlobalYaw_AltitudeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionGlobalYaw_AltitudeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionGlobalYaw_AltitudeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionGlobalYaw_AltitudeType_descriptor(), enum_t_value);
}
inline bool PositionGlobalYaw_AltitudeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PositionGlobalYaw_AltitudeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionGlobalYaw_AltitudeType>(
    PositionGlobalYaw_AltitudeType_descriptor(), name, value);
}
// ===================================================================

class StartRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.StartRequest) */ {
 public:
  inline StartRequest() : StartRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StartRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRequest(const StartRequest& from);
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.StartRequest";
  }
  protected:
  explicit StartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.StartRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StartResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.StartResponse) */ {
 public:
  inline StartResponse() : StartResponse(nullptr) {}
  ~StartResponse() override;
  explicit PROTOBUF_CONSTEXPR StartResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartResponse(const StartResponse& from);
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.StartResponse";
  }
  protected:
  explicit StartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // bool offboard_result = 1;
  void clear_offboard_result();
  bool offboard_result() const;
  void set_offboard_result(bool value);
  private:
  bool _internal_offboard_result() const;
  void _internal_set_offboard_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.StartResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  ~StopResponse() override;
  explicit PROTOBUF_CONSTEXPR StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // bool offboard_result = 1;
  void clear_offboard_result();
  bool offboard_result() const;
  void set_offboard_result(bool value);
  private:
  bool _internal_offboard_result() const;
  void _internal_set_offboard_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class IsActiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.IsActiveRequest) */ {
 public:
  inline IsActiveRequest() : IsActiveRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR IsActiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsActiveRequest(const IsActiveRequest& from);
  IsActiveRequest(IsActiveRequest&& from) noexcept
    : IsActiveRequest() {
    *this = ::std::move(from);
  }

  inline IsActiveRequest& operator=(const IsActiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveRequest& operator=(IsActiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsActiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsActiveRequest* internal_default_instance() {
    return reinterpret_cast<const IsActiveRequest*>(
               &_IsActiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IsActiveRequest& a, IsActiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsActiveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsActiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsActiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IsActiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IsActiveRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.IsActiveRequest";
  }
  protected:
  explicit IsActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.IsActiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class IsActiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.IsActiveResponse) */ {
 public:
  inline IsActiveResponse() : IsActiveResponse(nullptr) {}
  ~IsActiveResponse() override;
  explicit PROTOBUF_CONSTEXPR IsActiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsActiveResponse(const IsActiveResponse& from);
  IsActiveResponse(IsActiveResponse&& from) noexcept
    : IsActiveResponse() {
    *this = ::std::move(from);
  }

  inline IsActiveResponse& operator=(const IsActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsActiveResponse& operator=(IsActiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsActiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsActiveResponse* internal_default_instance() {
    return reinterpret_cast<const IsActiveResponse*>(
               &_IsActiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IsActiveResponse& a, IsActiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsActiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsActiveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsActiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsActiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsActiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IsActiveResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsActiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.IsActiveResponse";
  }
  protected:
  explicit IsActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsActiveFieldNumber = 1,
  };
  // bool is_active = 1;
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.IsActiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest) */ {
 public:
  inline SetPositionGlobalRequest() : SetPositionGlobalRequest(nullptr) {}
  ~SetPositionGlobalRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPositionGlobalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionGlobalRequest(const SetPositionGlobalRequest& from);
  SetPositionGlobalRequest(SetPositionGlobalRequest&& from) noexcept
    : SetPositionGlobalRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalRequest& operator=(const SetPositionGlobalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalRequest& operator=(SetPositionGlobalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionGlobalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionGlobalRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalRequest*>(
               &_SetPositionGlobalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetPositionGlobalRequest& a, SetPositionGlobalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionGlobalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionGlobalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionGlobalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionGlobalRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionGlobalRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.SetPositionGlobalRequest";
  }
  protected:
  explicit SetPositionGlobalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionGlobalYawFieldNumber = 1,
  };
  // .mavsdk.rpc.swarm_controller.PositionGlobalYaw position_global_yaw = 1;
  bool has_position_global_yaw() const;
  private:
  bool _internal_has_position_global_yaw() const;
  public:
  void clear_position_global_yaw();
  const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw& position_global_yaw() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* release_position_global_yaw();
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* mutable_position_global_yaw();
  void set_allocated_position_global_yaw(::mavsdk::rpc::swarm_controller::PositionGlobalYaw* position_global_yaw);
  private:
  const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw& _internal_position_global_yaw() const;
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* _internal_mutable_position_global_yaw();
  public:
  void unsafe_arena_set_allocated_position_global_yaw(
      ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* position_global_yaw);
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* unsafe_arena_release_position_global_yaw();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* position_global_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class SetPositionGlobalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.SetPositionGlobalResponse) */ {
 public:
  inline SetPositionGlobalResponse() : SetPositionGlobalResponse(nullptr) {}
  ~SetPositionGlobalResponse() override;
  explicit PROTOBUF_CONSTEXPR SetPositionGlobalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPositionGlobalResponse(const SetPositionGlobalResponse& from);
  SetPositionGlobalResponse(SetPositionGlobalResponse&& from) noexcept
    : SetPositionGlobalResponse() {
    *this = ::std::move(from);
  }

  inline SetPositionGlobalResponse& operator=(const SetPositionGlobalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionGlobalResponse& operator=(SetPositionGlobalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPositionGlobalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPositionGlobalResponse* internal_default_instance() {
    return reinterpret_cast<const SetPositionGlobalResponse*>(
               &_SetPositionGlobalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetPositionGlobalResponse& a, SetPositionGlobalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionGlobalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionGlobalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPositionGlobalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPositionGlobalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPositionGlobalResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPositionGlobalResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionGlobalResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.SetPositionGlobalResponse";
  }
  protected:
  explicit SetPositionGlobalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffboardResultFieldNumber = 1,
  };
  // bool offboard_result = 1;
  void clear_offboard_result();
  bool offboard_result() const;
  void set_offboard_result(bool value);
  private:
  bool _internal_offboard_result() const;
  void _internal_set_offboard_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.SetPositionGlobalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool offboard_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class SetRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.SetRateRequest) */ {
 public:
  inline SetRateRequest() : SetRateRequest(nullptr) {}
  ~SetRateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateRequest(const SetRateRequest& from);
  SetRateRequest(SetRateRequest&& from) noexcept
    : SetRateRequest() {
    *this = ::std::move(from);
  }

  inline SetRateRequest& operator=(const SetRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateRequest& operator=(SetRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateRequest* internal_default_instance() {
    return reinterpret_cast<const SetRateRequest*>(
               &_SetRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetRateRequest& a, SetRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetRateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.SetRateRequest";
  }
  protected:
  explicit SetRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 1,
  };
  // float frequency = 1;
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);
  private:
  float _internal_frequency() const;
  void _internal_set_frequency(float value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.SetRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float frequency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class SetRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.SetRateResponse) */ {
 public:
  inline SetRateResponse() : SetRateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRateResponse(const SetRateResponse& from);
  SetRateResponse(SetRateResponse&& from) noexcept
    : SetRateResponse() {
    *this = ::std::move(from);
  }

  inline SetRateResponse& operator=(const SetRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRateResponse& operator=(SetRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetRateResponse*>(
               &_SetRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetRateResponse& a, SetRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetRateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetRateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.SetRateResponse";
  }
  protected:
  explicit SetRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.SetRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class PositionGlobalYaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.swarm_controller.PositionGlobalYaw) */ {
 public:
  inline PositionGlobalYaw() : PositionGlobalYaw(nullptr) {}
  ~PositionGlobalYaw() override;
  explicit PROTOBUF_CONSTEXPR PositionGlobalYaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionGlobalYaw(const PositionGlobalYaw& from);
  PositionGlobalYaw(PositionGlobalYaw&& from) noexcept
    : PositionGlobalYaw() {
    *this = ::std::move(from);
  }

  inline PositionGlobalYaw& operator=(const PositionGlobalYaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionGlobalYaw& operator=(PositionGlobalYaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionGlobalYaw& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionGlobalYaw* internal_default_instance() {
    return reinterpret_cast<const PositionGlobalYaw*>(
               &_PositionGlobalYaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PositionGlobalYaw& a, PositionGlobalYaw& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionGlobalYaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionGlobalYaw* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionGlobalYaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionGlobalYaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionGlobalYaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PositionGlobalYaw& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionGlobalYaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.swarm_controller.PositionGlobalYaw";
  }
  protected:
  explicit PositionGlobalYaw(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PositionGlobalYaw_AltitudeType AltitudeType;
  static constexpr AltitudeType ALTITUDE_TYPE_REL_HOME =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME;
  static constexpr AltitudeType ALTITUDE_TYPE_AMSL =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL;
  static constexpr AltitudeType ALTITUDE_TYPE_AGL =
    PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL;
  static inline bool AltitudeType_IsValid(int value) {
    return PositionGlobalYaw_AltitudeType_IsValid(value);
  }
  static constexpr AltitudeType AltitudeType_MIN =
    PositionGlobalYaw_AltitudeType_AltitudeType_MIN;
  static constexpr AltitudeType AltitudeType_MAX =
    PositionGlobalYaw_AltitudeType_AltitudeType_MAX;
  static constexpr int AltitudeType_ARRAYSIZE =
    PositionGlobalYaw_AltitudeType_AltitudeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AltitudeType_descriptor() {
    return PositionGlobalYaw_AltitudeType_descriptor();
  }
  template<typename T>
  static inline const std::string& AltitudeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AltitudeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AltitudeType_Name.");
    return PositionGlobalYaw_AltitudeType_Name(enum_t_value);
  }
  static inline bool AltitudeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AltitudeType* value) {
    return PositionGlobalYaw_AltitudeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLatDegFieldNumber = 1,
    kLonDegFieldNumber = 2,
    kAltMFieldNumber = 3,
    kYawDegFieldNumber = 4,
    kAltitudeTypeFieldNumber = 5,
  };
  // double lat_deg = 1;
  void clear_lat_deg();
  double lat_deg() const;
  void set_lat_deg(double value);
  private:
  double _internal_lat_deg() const;
  void _internal_set_lat_deg(double value);
  public:

  // double lon_deg = 2;
  void clear_lon_deg();
  double lon_deg() const;
  void set_lon_deg(double value);
  private:
  double _internal_lon_deg() const;
  void _internal_set_lon_deg(double value);
  public:

  // float alt_m = 3;
  void clear_alt_m();
  float alt_m() const;
  void set_alt_m(float value);
  private:
  float _internal_alt_m() const;
  void _internal_set_alt_m(float value);
  public:

  // float yaw_deg = 4;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);
  private:
  float _internal_yaw_deg() const;
  void _internal_set_yaw_deg(float value);
  public:

  // .mavsdk.rpc.swarm_controller.PositionGlobalYaw.AltitudeType altitude_type = 5;
  void clear_altitude_type();
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType altitude_type() const;
  void set_altitude_type(::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType value);
  private:
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType _internal_altitude_type() const;
  void _internal_set_altitude_type(::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType value);
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.swarm_controller.PositionGlobalYaw)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_deg_;
  double lon_deg_;
  float alt_m_;
  float yaw_deg_;
  int altitude_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swarm_5fcontroller_2fswarm_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartRequest

// -------------------------------------------------------------------

// StartResponse

// bool offboard_result = 1;
inline void StartResponse::clear_offboard_result() {
  offboard_result_ = false;
}
inline bool StartResponse::_internal_offboard_result() const {
  return offboard_result_;
}
inline bool StartResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.StartResponse.offboard_result)
  return _internal_offboard_result();
}
inline void StartResponse::_internal_set_offboard_result(bool value) {
  
  offboard_result_ = value;
}
inline void StartResponse::set_offboard_result(bool value) {
  _internal_set_offboard_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.StartResponse.offboard_result)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// bool offboard_result = 1;
inline void StopResponse::clear_offboard_result() {
  offboard_result_ = false;
}
inline bool StopResponse::_internal_offboard_result() const {
  return offboard_result_;
}
inline bool StopResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.StopResponse.offboard_result)
  return _internal_offboard_result();
}
inline void StopResponse::_internal_set_offboard_result(bool value) {
  
  offboard_result_ = value;
}
inline void StopResponse::set_offboard_result(bool value) {
  _internal_set_offboard_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.StopResponse.offboard_result)
}

// -------------------------------------------------------------------

// IsActiveRequest

// -------------------------------------------------------------------

// IsActiveResponse

// bool is_active = 1;
inline void IsActiveResponse::clear_is_active() {
  is_active_ = false;
}
inline bool IsActiveResponse::_internal_is_active() const {
  return is_active_;
}
inline bool IsActiveResponse::is_active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.IsActiveResponse.is_active)
  return _internal_is_active();
}
inline void IsActiveResponse::_internal_set_is_active(bool value) {
  
  is_active_ = value;
}
inline void IsActiveResponse::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.IsActiveResponse.is_active)
}

// -------------------------------------------------------------------

// SetPositionGlobalRequest

// .mavsdk.rpc.swarm_controller.PositionGlobalYaw position_global_yaw = 1;
inline bool SetPositionGlobalRequest::_internal_has_position_global_yaw() const {
  return this != internal_default_instance() && position_global_yaw_ != nullptr;
}
inline bool SetPositionGlobalRequest::has_position_global_yaw() const {
  return _internal_has_position_global_yaw();
}
inline void SetPositionGlobalRequest::clear_position_global_yaw() {
  if (GetArenaForAllocation() == nullptr && position_global_yaw_ != nullptr) {
    delete position_global_yaw_;
  }
  position_global_yaw_ = nullptr;
}
inline const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw& SetPositionGlobalRequest::_internal_position_global_yaw() const {
  const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* p = position_global_yaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw&>(
      ::mavsdk::rpc::swarm_controller::_PositionGlobalYaw_default_instance_);
}
inline const ::mavsdk::rpc::swarm_controller::PositionGlobalYaw& SetPositionGlobalRequest::position_global_yaw() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest.position_global_yaw)
  return _internal_position_global_yaw();
}
inline void SetPositionGlobalRequest::unsafe_arena_set_allocated_position_global_yaw(
    ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* position_global_yaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_global_yaw_);
  }
  position_global_yaw_ = position_global_yaw;
  if (position_global_yaw) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest.position_global_yaw)
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* SetPositionGlobalRequest::release_position_global_yaw() {
  
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* temp = position_global_yaw_;
  position_global_yaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* SetPositionGlobalRequest::unsafe_arena_release_position_global_yaw() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest.position_global_yaw)
  
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* temp = position_global_yaw_;
  position_global_yaw_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* SetPositionGlobalRequest::_internal_mutable_position_global_yaw() {
  
  if (position_global_yaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::swarm_controller::PositionGlobalYaw>(GetArenaForAllocation());
    position_global_yaw_ = p;
  }
  return position_global_yaw_;
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* SetPositionGlobalRequest::mutable_position_global_yaw() {
  ::mavsdk::rpc::swarm_controller::PositionGlobalYaw* _msg = _internal_mutable_position_global_yaw();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest.position_global_yaw)
  return _msg;
}
inline void SetPositionGlobalRequest::set_allocated_position_global_yaw(::mavsdk::rpc::swarm_controller::PositionGlobalYaw* position_global_yaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_global_yaw_;
  }
  if (position_global_yaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_global_yaw);
    if (message_arena != submessage_arena) {
      position_global_yaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_global_yaw, submessage_arena);
    }
    
  } else {
    
  }
  position_global_yaw_ = position_global_yaw;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.swarm_controller.SetPositionGlobalRequest.position_global_yaw)
}

// -------------------------------------------------------------------

// SetPositionGlobalResponse

// bool offboard_result = 1;
inline void SetPositionGlobalResponse::clear_offboard_result() {
  offboard_result_ = false;
}
inline bool SetPositionGlobalResponse::_internal_offboard_result() const {
  return offboard_result_;
}
inline bool SetPositionGlobalResponse::offboard_result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.SetPositionGlobalResponse.offboard_result)
  return _internal_offboard_result();
}
inline void SetPositionGlobalResponse::_internal_set_offboard_result(bool value) {
  
  offboard_result_ = value;
}
inline void SetPositionGlobalResponse::set_offboard_result(bool value) {
  _internal_set_offboard_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.SetPositionGlobalResponse.offboard_result)
}

// -------------------------------------------------------------------

// SetRateRequest

// float frequency = 1;
inline void SetRateRequest::clear_frequency() {
  frequency_ = 0;
}
inline float SetRateRequest::_internal_frequency() const {
  return frequency_;
}
inline float SetRateRequest::frequency() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.SetRateRequest.frequency)
  return _internal_frequency();
}
inline void SetRateRequest::_internal_set_frequency(float value) {
  
  frequency_ = value;
}
inline void SetRateRequest::set_frequency(float value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.SetRateRequest.frequency)
}

// -------------------------------------------------------------------

// SetRateResponse

// -------------------------------------------------------------------

// PositionGlobalYaw

// double lat_deg = 1;
inline void PositionGlobalYaw::clear_lat_deg() {
  lat_deg_ = 0;
}
inline double PositionGlobalYaw::_internal_lat_deg() const {
  return lat_deg_;
}
inline double PositionGlobalYaw::lat_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.PositionGlobalYaw.lat_deg)
  return _internal_lat_deg();
}
inline void PositionGlobalYaw::_internal_set_lat_deg(double value) {
  
  lat_deg_ = value;
}
inline void PositionGlobalYaw::set_lat_deg(double value) {
  _internal_set_lat_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.PositionGlobalYaw.lat_deg)
}

// double lon_deg = 2;
inline void PositionGlobalYaw::clear_lon_deg() {
  lon_deg_ = 0;
}
inline double PositionGlobalYaw::_internal_lon_deg() const {
  return lon_deg_;
}
inline double PositionGlobalYaw::lon_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.PositionGlobalYaw.lon_deg)
  return _internal_lon_deg();
}
inline void PositionGlobalYaw::_internal_set_lon_deg(double value) {
  
  lon_deg_ = value;
}
inline void PositionGlobalYaw::set_lon_deg(double value) {
  _internal_set_lon_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.PositionGlobalYaw.lon_deg)
}

// float alt_m = 3;
inline void PositionGlobalYaw::clear_alt_m() {
  alt_m_ = 0;
}
inline float PositionGlobalYaw::_internal_alt_m() const {
  return alt_m_;
}
inline float PositionGlobalYaw::alt_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.PositionGlobalYaw.alt_m)
  return _internal_alt_m();
}
inline void PositionGlobalYaw::_internal_set_alt_m(float value) {
  
  alt_m_ = value;
}
inline void PositionGlobalYaw::set_alt_m(float value) {
  _internal_set_alt_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.PositionGlobalYaw.alt_m)
}

// float yaw_deg = 4;
inline void PositionGlobalYaw::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float PositionGlobalYaw::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline float PositionGlobalYaw::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.PositionGlobalYaw.yaw_deg)
  return _internal_yaw_deg();
}
inline void PositionGlobalYaw::_internal_set_yaw_deg(float value) {
  
  yaw_deg_ = value;
}
inline void PositionGlobalYaw::set_yaw_deg(float value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.PositionGlobalYaw.yaw_deg)
}

// .mavsdk.rpc.swarm_controller.PositionGlobalYaw.AltitudeType altitude_type = 5;
inline void PositionGlobalYaw::clear_altitude_type() {
  altitude_type_ = 0;
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType PositionGlobalYaw::_internal_altitude_type() const {
  return static_cast< ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType >(altitude_type_);
}
inline ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType PositionGlobalYaw::altitude_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.swarm_controller.PositionGlobalYaw.altitude_type)
  return _internal_altitude_type();
}
inline void PositionGlobalYaw::_internal_set_altitude_type(::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType value) {
  
  altitude_type_ = value;
}
inline void PositionGlobalYaw::set_altitude_type(::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType value) {
  _internal_set_altitude_type(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.swarm_controller.PositionGlobalYaw.altitude_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace swarm_controller
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType>() {
  return ::mavsdk::rpc::swarm_controller::PositionGlobalYaw_AltitudeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_swarm_5fcontroller_2fswarm_5fcontroller_2eproto
