// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: swarm_controller/swarm_controller.proto

#include "swarm_controller/swarm_controller.pb.h"
#include "swarm_controller/swarm_controller.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace swarm_controller {

static const char* SwarmControllerService_method_names[] = {
  "/mavsdk.rpc.swarm_controller.SwarmControllerService/Start",
  "/mavsdk.rpc.swarm_controller.SwarmControllerService/Stop",
  "/mavsdk.rpc.swarm_controller.SwarmControllerService/IsActive",
  "/mavsdk.rpc.swarm_controller.SwarmControllerService/SetRate",
  "/mavsdk.rpc.swarm_controller.SwarmControllerService/SetPositionGlobal",
};

std::unique_ptr< SwarmControllerService::Stub> SwarmControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SwarmControllerService::Stub> stub(new SwarmControllerService::Stub(channel, options));
  return stub;
}

SwarmControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Start_(SwarmControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(SwarmControllerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsActive_(SwarmControllerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRate_(SwarmControllerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPositionGlobal_(SwarmControllerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SwarmControllerService::Stub::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::mavsdk::rpc::swarm_controller::StartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Start_, context, request, response);
}

void SwarmControllerService::Stub::async::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, std::move(f));
}

void SwarmControllerService::Stub::async::Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Start_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>* SwarmControllerService::Stub::PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::swarm_controller::StartResponse, ::mavsdk::rpc::swarm_controller::StartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Start_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>* SwarmControllerService::Stub::AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SwarmControllerService::Stub::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::mavsdk::rpc::swarm_controller::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void SwarmControllerService::Stub::async::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void SwarmControllerService::Stub::async::Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>* SwarmControllerService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::swarm_controller::StopResponse, ::mavsdk::rpc::swarm_controller::StopRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Stop_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>* SwarmControllerService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SwarmControllerService::Stub::IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsActive_, context, request, response);
}

void SwarmControllerService::Stub::async::IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsActive_, context, request, response, std::move(f));
}

void SwarmControllerService::Stub::async::IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsActive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* SwarmControllerService::Stub::PrepareAsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::swarm_controller::IsActiveResponse, ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsActive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* SwarmControllerService::Stub::AsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsActiveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SwarmControllerService::Stub::SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRate_, context, request, response);
}

void SwarmControllerService::Stub::async::SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRate_, context, request, response, std::move(f));
}

void SwarmControllerService::Stub::async::SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>* SwarmControllerService::Stub::PrepareAsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::swarm_controller::SetRateResponse, ::mavsdk::rpc::swarm_controller::SetRateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>* SwarmControllerService::Stub::AsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SwarmControllerService::Stub::SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPositionGlobal_, context, request, response);
}

void SwarmControllerService::Stub::async::SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPositionGlobal_, context, request, response, std::move(f));
}

void SwarmControllerService::Stub::async::SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPositionGlobal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* SwarmControllerService::Stub::PrepareAsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse, ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPositionGlobal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* SwarmControllerService::Stub::AsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPositionGlobalRaw(context, request, cq);
  result->StartCall();
  return result;
}

SwarmControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmControllerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SwarmControllerService::Service, ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SwarmControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_controller::StartRequest* req,
             ::mavsdk::rpc::swarm_controller::StartResponse* resp) {
               return service->Start(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmControllerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SwarmControllerService::Service, ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SwarmControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_controller::StopRequest* req,
             ::mavsdk::rpc::swarm_controller::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmControllerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SwarmControllerService::Service, ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SwarmControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_controller::IsActiveRequest* req,
             ::mavsdk::rpc::swarm_controller::IsActiveResponse* resp) {
               return service->IsActive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmControllerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SwarmControllerService::Service, ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SwarmControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_controller::SetRateRequest* req,
             ::mavsdk::rpc::swarm_controller::SetRateResponse* resp) {
               return service->SetRate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmControllerService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SwarmControllerService::Service, ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SwarmControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* req,
             ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* resp) {
               return service->SetPositionGlobal(ctx, req, resp);
             }, this)));
}

SwarmControllerService::Service::~Service() {
}

::grpc::Status SwarmControllerService::Service::Start(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SwarmControllerService::Service::Stop(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SwarmControllerService::Service::IsActive(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SwarmControllerService::Service::SetRate(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SwarmControllerService::Service::SetPositionGlobal(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace swarm_controller

