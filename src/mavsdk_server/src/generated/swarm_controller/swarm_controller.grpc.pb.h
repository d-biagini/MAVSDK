// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: swarm_controller/swarm_controller.proto
#ifndef GRPC_swarm_5fcontroller_2fswarm_5fcontroller_2eproto__INCLUDED
#define GRPC_swarm_5fcontroller_2fswarm_5fcontroller_2eproto__INCLUDED

#include "swarm_controller/swarm_controller.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mavsdk {
namespace rpc {
namespace swarm_controller {

class SwarmControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.swarm_controller.SwarmControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // Start offboard control.
    virtual ::grpc::Status Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::mavsdk::rpc::swarm_controller::StartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    //
    // Stop offboard control.
    //
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::mavsdk::rpc::swarm_controller::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    //
    // Check if offboard control is active.
    //
    // True means that the vehicle is in offboard mode and we are actively sending
    // setpoints.
    virtual ::grpc::Status IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>> AsyncIsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>>(AsyncIsActiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>> PrepareAsyncIsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>>(PrepareAsyncIsActiveRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>> AsyncSetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>>(AsyncSetRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>> PrepareAsyncSetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>>(PrepareAsyncSetRateRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>> AsyncSetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>>(AsyncSetTargetComponentIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>> PrepareAsyncSetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>>(PrepareAsyncSetTargetComponentIdRaw(context, request, cq));
    }
    //
    // Set the position in Global coordinates (latitude, longitude, altitude) and yaw
    virtual ::grpc::Status SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>> AsyncSetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>>(AsyncSetPositionGlobalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>> PrepareAsyncSetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>>(PrepareAsyncSetPositionGlobalRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      //
      // Start offboard control.
      virtual void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Stop offboard control.
      //
      virtual void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Check if offboard control is active.
      //
      // True means that the vehicle is in offboard mode and we are actively sending
      // setpoints.
      virtual void IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      //
      // Set the position in Global coordinates (latitude, longitude, altitude) and yaw
      virtual void SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* AsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* PrepareAsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>* AsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetRateResponse>* PrepareAsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* AsyncSetTargetComponentIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* PrepareAsyncSetTargetComponentIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* AsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* PrepareAsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::mavsdk::rpc::swarm_controller::StartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>> AsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>>(AsyncStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>> PrepareAsyncStart(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>>(PrepareAsyncStartRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::mavsdk::rpc::swarm_controller::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>> AsyncIsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>>(AsyncIsActiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>> PrepareAsyncIsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>>(PrepareAsyncIsActiveRaw(context, request, cq));
    }
    ::grpc::Status SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>> AsyncSetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>>(AsyncSetRateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>> PrepareAsyncSetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>>(PrepareAsyncSetRateRaw(context, request, cq));
    }
    ::grpc::Status SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>> AsyncSetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>>(AsyncSetTargetComponentIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>> PrepareAsyncSetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>>(PrepareAsyncSetTargetComponentIdRaw(context, request, cq));
    }
    ::grpc::Status SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>> AsyncSetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>>(AsyncSetPositionGlobalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>> PrepareAsyncSetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>>(PrepareAsyncSetPositionGlobalRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, std::function<void(::grpc::Status)>) override;
      void Start(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, std::function<void(::grpc::Status)>) override;
      void IsActive(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, std::function<void(::grpc::Status)>) override;
      void SetRate(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTargetComponentId(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPositionGlobal(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>* AsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StartResponse>* PrepareAsyncStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* AsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* PrepareAsyncIsActiveRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>* AsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetRateResponse>* PrepareAsyncSetRateRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* AsyncSetTargetComponentIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* PrepareAsyncSetTargetComponentIdRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* AsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* PrepareAsyncSetPositionGlobalRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_IsActive_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRate_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTargetComponentId_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPositionGlobal_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // Start offboard control.
    virtual ::grpc::Status Start(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response);
    //
    // Stop offboard control.
    //
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response);
    //
    // Check if offboard control is active.
    //
    // True means that the vehicle is in offboard mode and we are actively sending
    // setpoints.
    virtual ::grpc::Status IsActive(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response);
    virtual ::grpc::Status SetRate(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response);
    virtual ::grpc::Status SetTargetComponentId(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response);
    //
    // Set the position in Global coordinates (latitude, longitude, altitude) and yaw
    virtual ::grpc::Status SetPositionGlobal(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Start() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::StartRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::StartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsActive() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActive(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::IsActiveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRate() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRate(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::SetRateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTargetComponentId(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPositionGlobal(::grpc::ServerContext* context, ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Start<WithAsyncMethod_Stop<WithAsyncMethod_IsActive<WithAsyncMethod_SetRate<WithAsyncMethod_SetTargetComponentId<WithAsyncMethod_SetPositionGlobal<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Start() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::StartRequest* request, ::mavsdk::rpc::swarm_controller::StartResponse* response) { return this->Start(context, request, response); }));}
    void SetMessageAllocatorFor_Start(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::StopRequest* request, ::mavsdk::rpc::swarm_controller::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsActive() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* request, ::mavsdk::rpc::swarm_controller::IsActiveResponse* response) { return this->IsActive(context, request, response); }));}
    void SetMessageAllocatorFor_IsActive(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsActive(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetRate() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::SetRateRequest* request, ::mavsdk::rpc::swarm_controller::SetRateResponse* response) { return this->SetRate(context, request, response); }));}
    void SetMessageAllocatorFor_SetRate(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRate(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* request, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* response) { return this->SetTargetComponentId(context, request, response); }));}
    void SetMessageAllocatorFor_SetTargetComponentId(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTargetComponentId(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* request, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* response) { return this->SetPositionGlobal(context, request, response); }));}
    void SetMessageAllocatorFor_SetPositionGlobal(
        ::grpc::MessageAllocator< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPositionGlobal(
      ::grpc::CallbackServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Start<WithCallbackMethod_Stop<WithCallbackMethod_IsActive<WithCallbackMethod_SetRate<WithCallbackMethod_SetTargetComponentId<WithCallbackMethod_SetPositionGlobal<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Start() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsActive() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRate() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Start() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsActive() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsActive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRate() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTargetComponentId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPositionGlobal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Start() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Start(context, request, response); }));
    }
    ~WithRawCallbackMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Start(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsActive() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsActive(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsActive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetRate() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRate(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTargetComponentId(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTargetComponentId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPositionGlobal(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPositionGlobal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Start() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::StartRequest, ::mavsdk::rpc::swarm_controller::StartResponse>* streamer) {
                       return this->StreamedStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Start(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StartRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::StartRequest,::mavsdk::rpc::swarm_controller::StartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::StopRequest, ::mavsdk::rpc::swarm_controller::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::StopRequest* /*request*/, ::mavsdk::rpc::swarm_controller::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::StopRequest,::mavsdk::rpc::swarm_controller::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsActive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsActive() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::IsActiveRequest, ::mavsdk::rpc::swarm_controller::IsActiveResponse>* streamer) {
                       return this->StreamedIsActive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsActive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsActive(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::IsActiveRequest* /*request*/, ::mavsdk::rpc::swarm_controller::IsActiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsActive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::IsActiveRequest,::mavsdk::rpc::swarm_controller::IsActiveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRate() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::SetRateRequest, ::mavsdk::rpc::swarm_controller::SetRateResponse>* streamer) {
                       return this->StreamedSetRate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRate(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetRateRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetRateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::SetRateRequest,::mavsdk::rpc::swarm_controller::SetRateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTargetComponentId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTargetComponentId() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* streamer) {
                       return this->StreamedSetTargetComponentId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTargetComponentId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTargetComponentId(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTargetComponentId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::SetTargetComponentIdRequest,::mavsdk::rpc::swarm_controller::SetTargetComponentIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPositionGlobal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPositionGlobal() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* streamer) {
                       return this->StreamedSetPositionGlobal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPositionGlobal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPositionGlobal(::grpc::ServerContext* /*context*/, const ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest* /*request*/, ::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPositionGlobal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::swarm_controller::SetPositionGlobalRequest,::mavsdk::rpc::swarm_controller::SetPositionGlobalResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsActive<WithStreamedUnaryMethod_SetRate<WithStreamedUnaryMethod_SetTargetComponentId<WithStreamedUnaryMethod_SetPositionGlobal<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Start<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsActive<WithStreamedUnaryMethod_SetRate<WithStreamedUnaryMethod_SetTargetComponentId<WithStreamedUnaryMethod_SetPositionGlobal<Service > > > > > > StreamedService;
};

}  // namespace swarm_controller
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_swarm_5fcontroller_2fswarm_5fcontroller_2eproto__INCLUDED
