// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: swarm_server/swarm_server.proto

#include "swarm_server/swarm_server.pb.h"
#include "swarm_server/swarm_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace swarm_server {

static const char* SwarmServerService_method_names[] = {
  "/mavsdk.rpc.swarm_server.SwarmServerService/SubscribePositionTargetGlobalSetpoint",
};

std::unique_ptr< SwarmServerService::Stub> SwarmServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SwarmServerService::Stub> stub(new SwarmServerService::Stub(channel, options));
  return stub;
}

SwarmServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SubscribePositionTargetGlobalSetpoint_(SwarmServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* SwarmServerService::Stub::SubscribePositionTargetGlobalSetpointRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>::Create(channel_.get(), rpcmethod_SubscribePositionTargetGlobalSetpoint_, context, request);
}

void SwarmServerService::Stub::async::SubscribePositionTargetGlobalSetpoint(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribePositionTargetGlobalSetpoint_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* SwarmServerService::Stub::AsyncSubscribePositionTargetGlobalSetpointRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>::Create(channel_.get(), cq, rpcmethod_SubscribePositionTargetGlobalSetpoint_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* SwarmServerService::Stub::PrepareAsyncSubscribePositionTargetGlobalSetpointRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>::Create(channel_.get(), cq, rpcmethod_SubscribePositionTargetGlobalSetpoint_, context, request, false, nullptr);
}

SwarmServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SwarmServerService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SwarmServerService::Service, ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest, ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>(
          [](SwarmServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* writer) {
               return service->SubscribePositionTargetGlobalSetpoint(ctx, req, writer);
             }, this)));
}

SwarmServerService::Service::~Service() {
}

::grpc::Status SwarmServerService::Service::SubscribePositionTargetGlobalSetpoint(::grpc::ServerContext* context, const ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::swarm_server::SubscribePositionTargetGlobalResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace swarm_server

