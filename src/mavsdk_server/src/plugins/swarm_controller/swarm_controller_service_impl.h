// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/swarm_controller/swarm_controller.proto)

#include "swarm_controller/swarm_controller.grpc.pb.h"
#include "plugins/swarm_controller/swarm_controller.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {


template<typename SwarmController = SwarmController, typename LazyPlugin = LazyPlugin<SwarmController>>

class SwarmControllerServiceImpl final : public rpc::swarm_controller::SwarmControllerService::Service {
public:

    SwarmControllerServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}




    grpc::Status Start(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::StartRequest* /* request */,
        rpc::swarm_controller::StartResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            return grpc::Status::OK;
        }

        

        auto result = _lazy_plugin.maybe_plugin()->start();

        if (response != nullptr) {
            
            
            response->set_offboard_result(result);
            
        }


        return grpc::Status::OK;
    }

    grpc::Status Stop(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::StopRequest* /* request */,
        rpc::swarm_controller::StopResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            return grpc::Status::OK;
        }

        

        auto result = _lazy_plugin.maybe_plugin()->stop();

        if (response != nullptr) {
            
            
            response->set_offboard_result(result);
            
        }


        return grpc::Status::OK;
    }

    grpc::Status IsActive(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::IsActiveRequest* /* request */,
        rpc::swarm_controller::IsActiveResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            return grpc::Status::OK;
        }

        

        auto result = _lazy_plugin.maybe_plugin()->is_active();

        if (response != nullptr) {
            
            
            response->set_is_active(result);
            
        }


        return grpc::Status::OK;
    }

    grpc::Status SetRate(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::SetRateRequest* /* request */,
        rpc::swarm_controller::SetRateResponse* /* response */) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            return grpc::Status::OK;
        }

        
        _lazy_plugin.maybe_plugin()->set_rate();
        

        

        return grpc::Status::OK;
    }

    grpc::Status SetPositionGlobal(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::SetPositionGlobalRequest* request,
        rpc::swarm_controller::SetPositionGlobalResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            
            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetPositionGlobal sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_position_global(translateFromRpcPositionGlobalYaw(request->position_global_yaw()));

        if (response != nullptr) {
            
            
            response->set_offboard_result(result);
            
        }


        return grpc::Status::OK;
    }


    void stop() {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom) {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom) {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end(); /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }


    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises {};
};

} // namespace mavsdk_server
} // namespace mavsdk