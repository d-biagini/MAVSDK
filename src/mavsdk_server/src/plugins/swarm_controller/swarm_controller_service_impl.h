// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/swarm_controller/swarm_controller.proto)

#include "swarm_controller/swarm_controller.grpc.pb.h"
#include "plugins/swarm_controller/swarm_controller.h"

#include "mavsdk.h"

#include "lazy_plugin.h"

#include "log.h"
#include <atomic>
#include <cmath>
#include <future>
#include <limits>
#include <memory>
#include <sstream>
#include <vector>

namespace mavsdk {
namespace mavsdk_server {

template<
    typename SwarmController = SwarmController,
    typename LazyPlugin = LazyPlugin<SwarmController>>

class SwarmControllerServiceImpl final
    : public rpc::swarm_controller::SwarmControllerService::Service {
public:
    SwarmControllerServiceImpl(LazyPlugin& lazy_plugin) : _lazy_plugin(lazy_plugin) {}

    static rpc::swarm_controller::PositionGlobalYaw::AltitudeType translateToRpcAltitudeType(
        const mavsdk::SwarmController::PositionGlobalYaw::AltitudeType& altitude_type)
    {
        switch (altitude_type) {
            default:
                LogErr() << "Unknown altitude_type enum value: " << static_cast<int>(altitude_type);
            // FALLTHROUGH
            case mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::RelHome:
                return rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME;
            case mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::Amsl:
                return rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL;
            case mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::Agl:
                return rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL;
        }
    }

    static mavsdk::SwarmController::PositionGlobalYaw::AltitudeType translateFromRpcAltitudeType(
        const rpc::swarm_controller::PositionGlobalYaw::AltitudeType altitude_type)
    {
        switch (altitude_type) {
            default:
                LogErr() << "Unknown altitude_type enum value: " << static_cast<int>(altitude_type);
            // FALLTHROUGH
            case rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_REL_HOME:
                return mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::RelHome;
            case rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AMSL:
                return mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::Amsl;
            case rpc::swarm_controller::PositionGlobalYaw_AltitudeType_ALTITUDE_TYPE_AGL:
                return mavsdk::SwarmController::PositionGlobalYaw::AltitudeType::Agl;
        }
    }

    static std::unique_ptr<rpc::swarm_controller::PositionGlobalYaw>
    translateToRpcPositionGlobalYaw(
        const mavsdk::SwarmController::PositionGlobalYaw& position_global_yaw)
    {
        auto rpc_obj = std::make_unique<rpc::swarm_controller::PositionGlobalYaw>();

        rpc_obj->set_lat_deg(position_global_yaw.lat_deg);

        rpc_obj->set_lon_deg(position_global_yaw.lon_deg);

        rpc_obj->set_alt_m(position_global_yaw.alt_m);

        rpc_obj->set_yaw_deg(position_global_yaw.yaw_deg);

        rpc_obj->set_altitude_type(translateToRpcAltitudeType(position_global_yaw.altitude_type));

        return rpc_obj;
    }

    static mavsdk::SwarmController::PositionGlobalYaw translateFromRpcPositionGlobalYaw(
        const rpc::swarm_controller::PositionGlobalYaw& position_global_yaw)
    {
        mavsdk::SwarmController::PositionGlobalYaw obj;

        obj.lat_deg = position_global_yaw.lat_deg();

        obj.lon_deg = position_global_yaw.lon_deg();

        obj.alt_m = position_global_yaw.alt_m();

        obj.yaw_deg = position_global_yaw.yaw_deg();

        obj.altitude_type = translateFromRpcAltitudeType(position_global_yaw.altitude_type());

        return obj;
    }

    grpc::Status Start(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::StartRequest* /* request */,
        rpc::swarm_controller::StartResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->start();

        if (response != nullptr) {
            response->set_offboard_result(result);
        }

        return grpc::Status::OK;
    }

    grpc::Status Stop(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::StopRequest* /* request */,
        rpc::swarm_controller::StopResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->stop();

        if (response != nullptr) {
            response->set_offboard_result(result);
        }

        return grpc::Status::OK;
    }

    grpc::Status IsActive(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::IsActiveRequest* /* request */,
        rpc::swarm_controller::IsActiveResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->is_active();

        if (response != nullptr) {
            response->set_is_active(result);
        }

        return grpc::Status::OK;
    }

    grpc::Status SetRate(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::SetRateRequest* request,
        rpc::swarm_controller::SetRateResponse* /* response */) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetRate sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        _lazy_plugin.maybe_plugin()->set_rate(request->frequency());

        return grpc::Status::OK;
    }

    grpc::Status SetPositionGlobal(
        grpc::ServerContext* /* context */,
        const rpc::swarm_controller::SetPositionGlobalRequest* request,
        rpc::swarm_controller::SetPositionGlobalResponse* response) override
    {
        if (_lazy_plugin.maybe_plugin() == nullptr) {
            return grpc::Status::OK;
        }

        if (request == nullptr) {
            LogWarn() << "SetPositionGlobal sent with a null request! Ignoring...";
            return grpc::Status::OK;
        }

        auto result = _lazy_plugin.maybe_plugin()->set_position_global(
            translateFromRpcPositionGlobalYaw(request->position_global_yaw()));

        if (response != nullptr) {
            response->set_offboard_result(result);
        }

        return grpc::Status::OK;
    }

    void stop()
    {
        _stopped.store(true);
        for (auto& prom : _stream_stop_promises) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        }
    }

private:
    void register_stream_stop_promise(std::weak_ptr<std::promise<void>> prom)
    {
        // If we have already stopped, set promise immediately and don't add it to list.
        if (_stopped.load()) {
            if (auto handle = prom.lock()) {
                handle->set_value();
            }
        } else {
            _stream_stop_promises.push_back(prom);
        }
    }

    void unregister_stream_stop_promise(std::shared_ptr<std::promise<void>> prom)
    {
        for (auto it = _stream_stop_promises.begin(); it != _stream_stop_promises.end();
             /* ++it */) {
            if (it->lock() == prom) {
                it = _stream_stop_promises.erase(it);
            } else {
                ++it;
            }
        }
    }

    LazyPlugin& _lazy_plugin;

    std::atomic<bool> _stopped{false};
    std::vector<std::weak_ptr<std::promise<void>>> _stream_stop_promises{};
};

} // namespace mavsdk_server
} // namespace mavsdk