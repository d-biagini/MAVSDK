// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see
// https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/swarm_controller/swarm_controller.proto)

#include <iomanip>

#include "swarm_controller_impl.h"
#include "plugins/swarm_controller/swarm_controller.h"

namespace mavsdk {

using PositionGlobalYaw = SwarmController::PositionGlobalYaw;

SwarmController::SwarmController(System& system) :
    PluginBase(),
    _impl{std::make_unique<SwarmControllerImpl>(system)}
{}

SwarmController::SwarmController(std::shared_ptr<System> system) :
    PluginBase(),
    _impl{std::make_unique<SwarmControllerImpl>(system)}
{}

SwarmController::~SwarmController() {}

bool SwarmController::start() const
{
    return _impl->start();
}

bool SwarmController::stop() const
{
    return _impl->stop();
}

bool SwarmController::is_active() const
{
    return _impl->is_active();
}

void SwarmController::set_rate(float frequency) const
{
    _impl->set_rate(frequency);
}

void SwarmController::set_target_component_id(int32_t target_component_id) const
{
    _impl->set_target_component_id(target_component_id);
}

bool SwarmController::set_position_global(PositionGlobalYaw position_global_yaw) const
{
    return _impl->set_position_global(position_global_yaw);
}

std::ostream&
operator<<(std::ostream& str, SwarmController::PositionGlobalYaw::AltitudeType const& altitude_type)
{
    switch (altitude_type) {
        case SwarmController::PositionGlobalYaw::AltitudeType::RelHome:
            return str << "Rel Home";
        case SwarmController::PositionGlobalYaw::AltitudeType::Amsl:
            return str << "Amsl";
        case SwarmController::PositionGlobalYaw::AltitudeType::Agl:
            return str << "Agl";
        default:
            return str << "Unknown";
    }
}
bool operator==(
    const SwarmController::PositionGlobalYaw& lhs, const SwarmController::PositionGlobalYaw& rhs)
{
    return ((std::isnan(rhs.lat_deg) && std::isnan(lhs.lat_deg)) || rhs.lat_deg == lhs.lat_deg) &&
           ((std::isnan(rhs.lon_deg) && std::isnan(lhs.lon_deg)) || rhs.lon_deg == lhs.lon_deg) &&
           ((std::isnan(rhs.alt_m) && std::isnan(lhs.alt_m)) || rhs.alt_m == lhs.alt_m) &&
           ((std::isnan(rhs.yaw_deg) && std::isnan(lhs.yaw_deg)) || rhs.yaw_deg == lhs.yaw_deg) &&
           (rhs.altitude_type == lhs.altitude_type);
}

std::ostream&
operator<<(std::ostream& str, SwarmController::PositionGlobalYaw const& position_global_yaw)
{
    str << std::setprecision(15);
    str << "position_global_yaw:" << '\n' << "{\n";
    str << "    lat_deg: " << position_global_yaw.lat_deg << '\n';
    str << "    lon_deg: " << position_global_yaw.lon_deg << '\n';
    str << "    alt_m: " << position_global_yaw.alt_m << '\n';
    str << "    yaw_deg: " << position_global_yaw.yaw_deg << '\n';
    str << "    altitude_type: " << position_global_yaw.altitude_type << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk